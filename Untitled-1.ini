## 1\. 環境設定

### 1.1 Dockerのインストール

- Docker Desktopをダウンロード: https://www.docker.com/products/docker-desktop
- インストーラーを実行し、指示に従ってインストール
- WSL 2のインストールが求められた場合は、指示に従ってインストール
- インストール完了後、Docker Desktopを起動

> Windows 11環境でもWSL 2の設定は通常必要です。Windows 11はWSL 2をサポートしており、Dockerを使用する際にはWSL 2が推奨されています。
> 
> ただし、Windows 11の最新バージョンでは、WSL 2のインストールプロセスが簡略化されており、Docker Desktop のインストール時に自動的にWSL 2をセットアップすることができる場合があります。そのため、手動でのWSL 2のインストールが不要になる可能性はありますが、これはシステムの構成や更新状態によって異なります。
> 
> Docker Desktopのインストール中にWSL 2のセットアップが求められた場合は、指示に従ってインストールすることをお勧めします。これにより、Dockerが最適なパフォーマンスで動作することが保証されます。

### 1.2 プロジェクトの準備

- コマンドプロンプトを開き、プロジェクトを作成したいディレクトリに移動
    
- 以下のコマンドを実行してプロジェクトディレトリを作成:
    
    ```
    mkdir todo-list
    cd todo-list
    ```
    

### 1.3 Dockerファイルの作成

- プロジェクトルートに「docker-compose.yml」ファイルを作成し、以下の内容を追加:
    
    ```yaml
    version: '3'
    services:
      app:
        build:
          context: .
          dockerfile: Dockerfile
        ports:
          - "8000:8000"
        volumes:
          - .:/app
        depends_on:
          - db
      db:
        image: mysql:5.7
        environment:
          MYSQL_DATABASE: todo_list
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        volumes:
          - dbdata:/var/lib/mysql
    volumes:
      dbdata:
    ```
    
- 同じディレクトリに「Dockerfile」を作成し、以下の内容を追加:
    
    ```jsx
    FROM php:8.1-fpm
    
    RUN apt-get update && apt-get install -y \\
        git \\
        curl \\
        libpng-dev \\
        libonig-dev \\
        libxml2-dev \\
        zip \\
        unzip
    
    RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd
    
    COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
    
    WORKDIR /var/www/app

    
    COPY . .
    
    RUN composer install
    
    CMD php artisan serve --host=0.0.0.0 --port=8000
    ```
    

## 2\. Laravelプロジェクトの作成

- 以下のコマンドを実行してLaravelプロジェクトを作成:  

    
    ```
    docker run --rm -v ${PWD}:/var/www/app composer create-project --prefer-dist laravel/laravel .
    ```

10/4 Laravelのenvファイルが見当たらない

### 2.1 .envファイルの設定

- .envファイルを開き、以下のように編集:
    
    ```
    DB_CONNECTION=mysql
    DB_HOST=db
    DB_PORT=3306
    DB_DATABASE=todo_list
    DB_USERNAME=user
    DB_PASSWORD=password
    ```
    

## 3\. Dockerコンテナの起動

- 以下のコマンドを実行してDockerコンテナを起動:
    
    ```
    docker-compose up -d
    ```
    

## 4\. データベースのセットアップ

- 以下のコマンドを実行してマイグレーションを実行:
    
    ```
    docker-compose exec app php artisan migrate
    ```
    

## 5\. モデルとマイグレーションの作成

- 以下のコマンドを実行してTaskモデルとマイグレーションを作成:
    
    ```
    docker-compose exec app php artisan make:model Task -m
    ```
    
- database/migrations/xxxx_xx_xx_xxxxxx_create_tasks_table.phpを開き、以下のように編集:
    
    ```php
    public function up()
    {
        Schema::create('tasks', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description')->nullable();
            $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
            $table->timestamps();
        });
    }
    ```
    
- マイグレーションを実行:
    
    ```
    docker-compose exec app php artisan migrate
    ```
    

## 6\. コントローラーの作成

- 以下のコマンドを実行してTaskControllerを作成:
    
    ```
    docker-compose exec app php artisan make:controller TaskController --resource
    ```
    

## 7\. ルーティングの設定

- routes/web.phpを開き、以下のコードを追加:
    
    ```php
    use App\\Http\\Controllers\\TaskController;
    
    Route::resource('tasks', TaskController::class);
    ```
    

## 8\. ビューの作成

- ビューファイルの作成
    
    resources/views/tasksディレクトリを作成し、以下のファイルを作成します：
    
    - index.blade.php（タスク一覧表示）
    - create.blade.php（新規タスク作成フォーム）
    - edit.blade.php（タスク編集フォーム）
    
    各ファイルのコード例：
    
    ```html
    <!-- index.blade.php -->
    @extends('layouts.app')
    @section('content')
        <h1>タスク一覧</h1>
        <!-- タスク一覧表示のコード -->
    @endsection
    
    <!-- create.blade.php -->
    @extends('layouts.app')
    @section('content')
        <h1>新規タスク作成</h1>
        <!-- 新規タスク作成フォームのコード -->
    @endsection
    
    <!-- edit.blade.php -->
    @extends('layouts.app')
    @section('content')
        <h1>タスク編集</h1>
        <!-- タスク編集フォームのコード -->
    @endsection
    ```
    
    各ファイルはHTMLとLaravelのBladeテンプレート構文を使用して、フォームと一覧表示を実装します。
    
- 各ビューファイルにHTMLとLaravelのBladeテンプレート構文を使用してフォームと一覧表示を実装
    

はい、3つのビューファイルのコードを具体的に書きます。これらのファイルは resources/views/tasks ディレクトリに作成します。

1.  index.blade.php（タスク一覧表示）：

```html
@extends('layouts.app')

@section('content')
    <h1>タスク一覧</h1>
    <a href="{{ route('tasks.create') }}" class="btn btn-primary mb-3">新規タスク作成</a>
    
    @if($tasks->count() > 0)
        <table class="table">
            <thead>
                <tr>
                    <th>タイトル</th>
                    <th>状態</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach($tasks as $task)
                    <tr>
                        <td>{{ $task->title }}</td>
                        <td>{{ $task->status }}</td>
                        <td>
                            <a href="{{ route('tasks.edit', $task->id) }}" class="btn btn-sm btn-warning">編集</a>
                            <form action="{{ route('tasks.destroy', $task->id) }}" method="POST" style="display: inline-block;">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('本当に削除しますか？')">削除</button>
                            </form>
                        </td>
                    </tr>
                @endforeach
            </tbody>
        </table>
    @else
        <p>タスクはありません。</p>
    @endif
@endsection
```

1.  create.blade.php（新規タスク作成フォーム）：

```html
@extends('layouts.app')

@section('content')
    <h1>新規タスク作成</h1>
    <form action="{{ route('tasks.store') }}" method="POST">
        @csrf
        <div class="form-group">
            <label for="title">タイトル</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        <div class="form-group">
            <label for="description">説明</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
        </div>
        <div class="form-group">
            <label for="status">状態</label>
            <select class="form-control" id="status" name="status">
                <option value="pending">未着手</option>
                <option value="in_progress">進行中</option>
                <option value="completed">完了</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">作成</button>
        <a href="{{ route('tasks.index') }}" class="btn btn-secondary">戻る</a>
    </form>
@endsection
```

1.  edit.blade.php（タスク編集フォーム）：

```html
@extends('layouts.app')

@section('content')
    <h1>タスク編集</h1>
    <form action="{{ route('tasks.update', $task->id) }}" method="POST">
        @csrf
        @method('PUT')
        <div class="form-group">
            <label for="title">タイトル</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ $task->title }}" required>
        </div>
        <div class="form-group">
            <label for="description">説明</label>
            <textarea class="form-control" id="description" name="description" rows="3">{{ $task->description }}</textarea>
        </div>
        <div class="form-group">
            <label for="status">状態</label>
            <select class="form-control" id="status" name="status">
                <option value="pending" {{ $task->status == 'pending' ? 'selected' : '' }}>未着手</option>
                <option value="in_progress" {{ $task->status == 'in_progress' ? 'selected' : '' }}>進行中</option>
                <option value="completed" {{ $task->status == 'completed' ? 'selected' : '' }}>完了</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">更新</button>
        <a href="{{ route('tasks.index') }}" class="btn btn-secondary">戻る</a>
    </form>
@endsection
```

これらのファイルは、HTMLとLaravelのBladeテンプレート構文を使用して、フォームと一覧表示を実装しています。各ファイルは@extendsディレクティブを使用してレイアウトを継承し、@sectionディレクティブを使用してコンテンツを定義しています。

## 9\. アプリケーションの動作確認

- ブラウザで[http://localhost:8000/tasksにアクセスし、TODOリストアプリケーションが正常に動作することを確認](http://localhost:8000/tasks%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%80%81TODO%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E6%AD%A3%E5%B8%B8%E3%81%AB%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D)

## 10\. 開発とデバッグ

- コードの変更は自動的にDockerコンテナに反映されます
    
- ログの確認:
    
    ```
    docker-compose logs app
    ```
    

## 11\. Dockerコンテナの停止

- 開発終了時、以下のコマンドでDockerコンテナを停止:
    
    ```
    docker-compose down
    ```
    

この手順で、WindowsとDockerを使用してLaravelでTODOリストアプリケーションを作成できます。Dockerを使用することで、開発環境の構築が簡単になり、チーム間での環境の統一が容易になります。

[テスト](https://www.notion.so/1119d2bfa2b680f39329c9477161595d?pvs=21)